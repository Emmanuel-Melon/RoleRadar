// Prisma schema for RoleRadar app
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  name             String
  role             Role
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  candidateProfile CandidateProfile?
  recruiterProfile RecruiterProfile?
  Experience       Experience[]
  Education        Education[]
  Project          Project[]
}

enum Role {
  CANDIDATE
  RECRUITER
}

model CandidateProfile {
  id           String        @id @default(cuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  skills       String[]
  interests    String[]
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model RecruiterProfile {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  company   String
  jobPosts  JobPost[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model JobPost {
  id           String           @id @default(cuid())
  title        String
  description  String
  skills       String[]
  location     String
  recruiterId  String
  recruiter    RecruiterProfile @relation(fields: [recruiterId], references: [id])
  applications Application[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Application {
  id          String            @id @default(cuid())
  candidateId String
  jobPostId   String
  candidate   CandidateProfile  @relation(fields: [candidateId], references: [id])
  jobPost     JobPost           @relation(fields: [jobPostId], references: [id])
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Experience {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  title        String
  company      String
  companyLogo  String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?
  technologies String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Education {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  school      String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  title        String
  description  String
  url          String?
  image        String?
  technologies String[]
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
