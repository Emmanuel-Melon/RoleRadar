generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               String            @id @default(cuid())
  email                            String            @unique
  password                         String?
  name                             String
  role                             Role?
  createdAt                        DateTime?         @default(now())
  updatedAt                        DateTime?         @updatedAt
  candidateProfile                 CandidateProfile?
  Education                        Education[]
  Experience                       Experience[]
  Message_Message_receiverIdToUser Message[]         @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]         @relation("Message_senderIdToUser")
  Project                          Project[]
  recruiterProfile                 RecruiterProfile?
  UserSettings                     UserSettings?
}

model CandidateProfile {
  id              String            @id @default(cuid())
  userId          String            @unique
  skills          String[]
  interests       String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  applications    Application[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  CompanyInterest CompanyInterest[]
}

model RecruiterProfile {
  id        String    @id @default(cuid())
  userId    String    @unique
  company   String?
  logo      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companyId String?
  jobPosts  JobPost[]
  Company   Company?  @relation(fields: [companyId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPost {
  id           String            @id @default(cuid())
  title        String
  description  String
  requirements String[]
  skills       String[]
  location     String
  type         JobType           @default(FULL_TIME)
  recruiterId  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  companyId    String?
  applications Application[]
  Company      Company?          @relation(fields: [companyId], references: [id])
  recruiter    RecruiterProfile? @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  Salary       Salary?
}

model Application {
  id          String            @id @default(cuid())
  candidateId String
  jobPostId   String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  candidate   CandidateProfile  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobPost     JobPost           @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  Message     Message[]
}

model Experience {
  id           String    @id @default(cuid())
  userId       String
  title        String
  company      String
  companyLogo  String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?
  technologies String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String    @id @default(cuid())
  userId      String
  school      String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id           String    @id @default(cuid())
  userId       String
  title        String
  description  String
  url          String?
  image        String?
  technologies String[]
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id               String             @id
  name             String
  logo             String?
  description      String?
  website          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  CompanyInterest  CompanyInterest[]
  JobPost          JobPost[]
  RecruiterProfile RecruiterProfile[]
}

model CompanyInterest {
  id               String           @id
  companyId        String
  candidateId      String
  status           InterestStatus   @default(INTERESTED)
  note             String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  CandidateProfile CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  Company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, candidateId])
}

model JobPreferences {
  id                 String             @id
  userSettingsId     String             @unique
  jobType            JobType
  experienceLevel    ExperienceLevel
  skills             String[]
  minSalary          Int?
  maxSalary          Int?
  locationPreference LocationPreference
  UserSettings       UserSettings       @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)
}

model Message {
  id                            String      @id
  content                       String
  senderId                      String
  receiverId                    String
  applicationId                 String
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime
  Application                   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  User_Message_receiverIdToUser User        @relation("Message_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade)
  User_Message_senderIdToUser   User        @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade)
}

model NotificationPreferences {
  id                 String       @id
  userSettingsId     String       @unique
  newJobMatches      Boolean      @default(true)
  applicationUpdates Boolean      @default(true)
  messages           Boolean      @default(true)
  emailNotifications Boolean      @default(false)
  UserSettings       UserSettings @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)
}

model Salary {
  id        String  @id
  min       Int
  max       Int
  currency  String  @default("USD")
  jobPostId String  @unique
  JobPost   JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                      String                   @id
  userId                  String                   @unique
  profileVisibility       ProfileVisibility        @default(PUBLIC)
  showSalaryExpectations  Boolean                  @default(false)
  anonymousApplications   Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime
  JobPreferences          JobPreferences?
  NotificationPreferences NotificationPreferences?
  User                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  CANDIDATE
  RECRUITER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  LEAD
}

enum InterestStatus {
  INTERESTED
  CONTACTED
  MEETING_SCHEDULED
  NOT_INTERESTED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum LocationPreference {
  REMOTE
  HYBRID
  ONSITE
  FLEXIBLE
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
  CONTACTS_ONLY
}
